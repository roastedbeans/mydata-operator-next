generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id          String       @id @default(uuid())
  name        String
  opType      String
  orgCode     String       @unique
  orgType     String
  authType    String
  industry    String
  serialNum   String       @unique @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Account     Account[]
  Log         Log[]
  oAuthClient OAuthClient?
  User        User[]
}

model User {
  id             String          @id @default(uuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orgCode        String
  accounts       Account[]
  certificates   Certificate[]
  consents       Consent[]
  logs           Log[]
  signedConsents SignedConsent[]
  Organization   Organization    @relation(fields: [orgCode], references: [orgCode])
}

model Certificate {
  id                     String               @id @default(uuid())
  serialNumber           String               @default(cuid())
  certTxId               String
  signTxId               String
  phoneNumber            String
  userId                 String
  userCI                 String
  requestTitle           String
  consentType            String
  deviceCode             String
  deviceBrowser          String
  issuedAt               DateTime             @default(now())
  expiresAt              DateTime
  revoked                Boolean              @default(false)
  revokedAt              DateTime?
  revocationReason       String?
  certificateAuthorityId String
  CertificateAuthority   CertificateAuthority @relation(fields: [certificateAuthorityId], references: [id])
  user                   User                 @relation(fields: [userId], references: [id])
  consent                Consent[]
  logs                   Log[]
  revocationEntries      Revocation[]
  signedConsent          SignedConsent[]
}

model Consent {
  id            String       @id @default(uuid())
  txId          String
  consentTitle  String
  consent       String
  consentLen    Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String?
  certificateId String?
  Certificate   Certificate? @relation(fields: [certificateId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])
}

model SignedConsent {
  id               String       @id @default(uuid())
  txId             String
  signedConsent    String
  signedConsentLen Int
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  userId           String?
  certificateId    String?
  Certificate      Certificate? @relation(fields: [certificateId], references: [id])
  user             User?        @relation(fields: [userId], references: [id])
}

model Revocation {
  id            String      @id @default(uuid())
  certificateId String
  revokedAt     DateTime    @default(now())
  reason        String?
  certificate   Certificate @relation(fields: [certificateId], references: [id])
}

model CertificateAuthority {
  id          String        @id @default(uuid())
  caCode      String        @unique
  name        String
  privateKey  String
  publicKey   String
  createdAt   DateTime      @default(now())
  Certificate Certificate[]
}

model OAuthClient {
  id             String       @id @default(uuid())
  clientId       String       @unique
  clientSecret   String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Log {
  id            String        @id @default(uuid())
  userId        String
  certificateId String?
  actionType    String
  timestamp     DateTime      @default(now())
  details       String?
  orgCode       String?
  certificate   Certificate?  @relation(fields: [certificateId], references: [id])
  Organization  Organization? @relation(fields: [orgCode], references: [orgCode])
  user          User          @relation(fields: [userId], references: [id])
}

model Account {
  seqno            Int              @unique @default(autoincrement())
  userId           String?
  accountNum       String           @id @unique
  accountStatus    String
  accountType      String
  createdAt        DateTime         @default(now())
  firstName        String
  isConsent        Boolean          @default(false)
  isForeignDeposit Boolean          @default(false)
  isMinus          Boolean          @default(false)
  lastName         String
  orgCode          String
  phoneNumber      String
  pinCode          String
  prodName         String
  updatedAt        DateTime         @default(now())
  Organization     Organization     @relation(fields: [orgCode], references: [orgCode])
  User             User?            @relation(fields: [userId], references: [id])
  DepositAccount   DepositAccount[]
}

model DepositAccount {
  accountNum       String
  balanceAmt       Decimal
  commitAmt        Decimal
  currencyCode     String
  depositId        String   @id @unique
  expDate          DateTime
  issueDate        DateTime
  lastPaidInCnt    Int
  monthlyPaidInAmt Decimal
  offeredRate      Decimal
  savingMethod     String
  withdrawableAmt  Decimal
  Account          Account  @relation(fields: [accountNum], references: [accountNum])
}
